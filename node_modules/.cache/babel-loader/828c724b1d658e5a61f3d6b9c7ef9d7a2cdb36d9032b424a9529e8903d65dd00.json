{"ast":null,"code":"export const generateUniqueId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\nexport const formatCurrency = (amount, currency = 'EUR') => {\n  // Map common currency codes to their symbols\n  const currencySymbols = {\n    USD: '$',\n    EUR: '€',\n    GBP: '£',\n    JPY: '¥',\n    PEN: 'S/'\n    // Add more as needed\n  };\n  const symbol = currencySymbols[currency] || currency; // Fallback to code if symbol not found\n\n  return `${symbol} ${new Intl.NumberFormat('es-ES', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount)}`;\n};\nexport const calculateTotals = transactions => {\n  let totalIncome = 0;\n  let totalExpenses = 0;\n  transactions.forEach(transaction => {\n    if (transaction.type === 'income') {\n      totalIncome += transaction.amount;\n    } else {\n      totalExpenses += transaction.amount;\n    }\n  });\n  const balance = totalIncome - totalExpenses;\n  return {\n    totalIncome,\n    totalExpenses,\n    balance\n  };\n};","map":{"version":3,"names":["generateUniqueId","Date","now","toString","Math","random","substr","formatCurrency","amount","currency","currencySymbols","USD","EUR","GBP","JPY","PEN","symbol","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","calculateTotals","transactions","totalIncome","totalExpenses","forEach","transaction","type","balance"],"sources":["D:/Lester/Programación/Project_Finanzas/src/utils/helpers.js"],"sourcesContent":["export const generateUniqueId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\nexport const formatCurrency = (amount, currency = 'EUR') => {\n  // Map common currency codes to their symbols\n  const currencySymbols = {\n    USD: '$',\n    EUR: '€',\n    GBP: '£',\n    JPY: '¥',\n    PEN: 'S/',\n    // Add more as needed\n  };\n\n  const symbol = currencySymbols[currency] || currency; // Fallback to code if symbol not found\n\n  return `${symbol} ${new Intl.NumberFormat('es-ES', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount)}`;\n};\n\nexport const calculateTotals = (transactions) => {\n  let totalIncome = 0;\n  let totalExpenses = 0;\n\n  transactions.forEach(transaction => {\n    if (transaction.type === 'income') {\n      totalIncome += transaction.amount;\n    } else {\n      totalExpenses += transaction.amount;\n    }\n  });\n\n  const balance = totalIncome - totalExpenses;\n\n  return { totalIncome, totalExpenses, balance };\n};"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC;AACvE,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,MAAM,EAAEC,QAAQ,GAAG,KAAK,KAAK;EAC1D;EACA,MAAMC,eAAe,GAAG;IACtBC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE;IACL;EACF,CAAC;EAED,MAAMC,MAAM,GAAGN,eAAe,CAACD,QAAQ,CAAC,IAAIA,QAAQ,CAAC,CAAC;;EAEtD,OAAO,GAAGO,MAAM,IAAI,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACjDC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACb,MAAM,CAAC,EAAE;AACrB,CAAC;AAED,OAAO,MAAMc,eAAe,GAAIC,YAAY,IAAK;EAC/C,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,aAAa,GAAG,CAAC;EAErBF,YAAY,CAACG,OAAO,CAACC,WAAW,IAAI;IAClC,IAAIA,WAAW,CAACC,IAAI,KAAK,QAAQ,EAAE;MACjCJ,WAAW,IAAIG,WAAW,CAACnB,MAAM;IACnC,CAAC,MAAM;MACLiB,aAAa,IAAIE,WAAW,CAACnB,MAAM;IACrC;EACF,CAAC,CAAC;EAEF,MAAMqB,OAAO,GAAGL,WAAW,GAAGC,aAAa;EAE3C,OAAO;IAAED,WAAW;IAAEC,aAAa;IAAEI;EAAQ,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}